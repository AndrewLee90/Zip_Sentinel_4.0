<?php
/**
 * Plugin Name: Malware Detection Board
 * Description: 악성코드 검사 API 연동 웹커뮤니티 게시판
 * Version: 1.0.0
 * Author: Custom
 */

// 직접 접근 방지
if (!defined('ABSPATH')) {
    exit;
}

// 파일 업로드 제한 설정
@ini_set('upload_max_filesize', '2048M');
@ini_set('post_max_size', '2048M');
@ini_set('memory_limit', '3072M');
@ini_set('max_execution_time', '1200');
@ini_set('max_input_time', '1200');

// 필수 파일들이 존재하는지 확인
$required_files = array(
    plugin_dir_path(__FILE__) . 'includes/class-api-handler.php',
    plugin_dir_path(__FILE__) . 'includes/class-admin-page.php',
    plugin_dir_path(__FILE__) . 'includes/hooks.php'
);

$missing_files = array();
foreach ($required_files as $file) {
    if (!file_exists($file)) {
        $missing_files[] = basename($file);
    }
}

if (!empty($missing_files)) {
    add_action('admin_notices', function() use ($missing_files) {
        echo '<div class="notice notice-error"><p>';
        echo '<strong>Malware Detection Board:</strong> 다음 파일들이 누락되었습니다: ' . implode(', ', $missing_files);
        echo '</p></div>';
    });
    return;
}

// 파일들 로드
require_once plugin_dir_path(__FILE__) . 'includes/class-api-handler.php';
require_once plugin_dir_path(__FILE__) . 'includes/class-admin-page.php';
require_once plugin_dir_path(__FILE__) . 'includes/hooks.php';

// 디버깅을 위한 로그 함수
function mdb_write_log($message) {
    if (defined('WP_DEBUG') && WP_DEBUG === true) {
        if (is_array($message) || is_object($message)) {
            error_log('[MDB] ' . print_r($message, true));
        } else {
            error_log('[MDB] ' . $message);
        }
    }
}

function create_malware_board_table() {
    global $wpdb;
    $charset_collate = $wpdb->get_charset_collate();
    $table_name = $wpdb->prefix . 'malware_board';
    
    // 1. 먼저 기본 테이블 생성 (존재하지 않는 경우)
    $sql = "CREATE TABLE IF NOT EXISTS {$table_name} (
        id bigint(20) NOT NULL AUTO_INCREMENT,
        title varchar(255) NOT NULL,
        content longtext NOT NULL,
        author bigint(20) NOT NULL,
        file_url varchar(255),
        file_name varchar(255),
        status varchar(20) NOT NULL DEFAULT 'pending',
        malware_score int(11) DEFAULT 0,
        malware_status varchar(20) DEFAULT 'pending',
        malware_details longtext,
        block_reason varchar(500),
        detected_items longtext,
        malicious_file_count int(11) DEFAULT 0,
        total_file_count int(11) DEFAULT 0,
        created_at datetime DEFAULT CURRENT_TIMESTAMP,
        updated_at datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        PRIMARY KEY (id),
        KEY author (author),
        KEY status (status),
        KEY malware_status (malware_status)
    ) $charset_collate;";
    
    require_once(ABSPATH . 'wp-admin/includes/upgrade.php');
    dbDelta($sql);
    
    // 2. 기존 컬럼 목록 가져오기
    $existing_columns = $wpdb->get_col("DESCRIBE {$table_name}");
    
    // 3. 필요한 컬럼들 추가
    $columns_to_add = array(
        'malware_score' => "ALTER TABLE {$table_name} ADD COLUMN malware_score int(11) DEFAULT 0",
        'malware_status' => "ALTER TABLE {$table_name} ADD COLUMN malware_status varchar(20) DEFAULT 'pending'",
        'malware_details' => "ALTER TABLE {$table_name} ADD COLUMN malware_details longtext",
        'block_reason' => "ALTER TABLE {$table_name} ADD COLUMN block_reason varchar(500)",
        'detected_items' => "ALTER TABLE {$table_name} ADD COLUMN detected_items longtext",
        'malicious_file_count' => "ALTER TABLE {$table_name} ADD COLUMN malicious_file_count int(11) DEFAULT 0",
        'total_file_count' => "ALTER TABLE {$table_name} ADD COLUMN total_file_count int(11) DEFAULT 0"
    );
    
    foreach ($columns_to_add as $column_name => $sql) {
        if (!in_array($column_name, $existing_columns)) {
            $result = $wpdb->query($sql);
            if ($result === false) {
                mdb_write_log("컬럼 추가 실패: {$column_name} - " . $wpdb->last_error);
            } else {
                mdb_write_log("컬럼 추가 성공: {$column_name}");
            }
        }
    }
    
    // 4. 테이블 버전 저장
    update_option('malware_board_table_version', '1.0');
    
    mdb_write_log("악성코드 검사 게시판 테이블 업데이트 완료 (v1.0)");
}

// 플러그인 활성화시 테이블 생성/업데이트
register_activation_hook(__FILE__, 'create_malware_board_table');

// 플러그인 로드시에도 테이블 버전 체크
add_action('plugins_loaded', 'check_malware_board_table_version');

function check_malware_board_table_version() {
    $current_version = get_option('malware_board_table_version', '1.0');
    $required_version = '1.0';
    
    // 버전이 낮으면 테이블 업데이트
    if (version_compare($current_version, $required_version, '<')) {
        mdb_write_log("테이블 버전 업데이트 필요: {$current_version} -> {$required_version}");
        create_malware_board_table();
    }
}

function mdb_init() {
    // 관리자 페이지 초기화
    if (is_admin()) {
        MalwareBoardAdminPage::init();
    }
    // 후킹 초기화
    MDBHooks::init();
}
add_action('plugins_loaded', 'mdb_init');

// 플러그인 활성화시 기본 설정
register_activation_hook(__FILE__, 'mdb_activate');
function mdb_activate() {
    // 기본 설정값 추가
    add_option('mdb_auto_send', 1);
    add_option('mdb_api_endpoint', '');
    add_option('mdb_api_key', '');
    add_option('mdb_safe_threshold', 2);
    add_option('mdb_warning_threshold', 6);
    add_option('mdb_admin_notifications', 1);
    add_option('mdb_retry_attempts', 3);
    
    // 테이블 생성
    create_malware_board_table();
}

// 플러그인 비활성화시 정리
register_deactivation_hook(__FILE__, 'mdb_deactivate');
function mdb_deactivate() {
    // cron job 정리
    wp_clear_scheduled_hook('mdb_retry_analysis');
    wp_clear_scheduled_hook('mdb_check_api_result');
}

// 파일 업로드 처리 함수
function handle_malware_board_file_upload() {
    if (empty($_FILES['file']['name'])) {
        return array('url' => '', 'name' => '');
    }

    if ($_FILES['file']['error'] !== UPLOAD_ERR_OK) {
        $error_code = $_FILES['file']['error'];
        mdb_write_log("파일 업로드 오류 코드: $error_code");
        return new WP_Error('upload_error', '파일 업로드에 실패했습니다. 오류 코드: ' . $error_code);
    }

    $max_upload = min((int)ini_get('upload_max_filesize'), (int)ini_get('post_max_size'));
    $max_size = $max_upload * 1024 * 1024;

    if ($_FILES['file']['size'] > $max_size) {
        return new WP_Error('file_too_large',
            sprintf('파일 크기가 너무 큽니다. %dMB 이하의 파일만 업로드 가능합니다.', $max_upload));
    }

    $upload_dir = wp_upload_dir();
    $board_upload_dir = $upload_dir['basedir'] . '/malware-board-uploads';
    if (!file_exists($board_upload_dir)) {
        wp_mkdir_p($board_upload_dir);
    }

    $blocked_types = ['php', 'php3', 'php4', 'php5', 'phtml', 'cgi', 'pl', 'asp', 'aspx',
                      'jsp', 'jspx', 'htaccess', 'htpasswd', 'config', 'conf', 'ini', 'dll', 
                      'so', 'exe', 'msi', 'bat', 'cmd', 'sh', 'bash'];

    $file_info = wp_check_filetype($_FILES['file']['name']);
    $file_ext = strtolower($file_info['ext']);

    if (in_array($file_ext, $blocked_types)) {
        return new WP_Error('invalid_file_type', '보안상의 이유로 해당 파일 형식은 업로드할 수 없습니다.');
    }

    require_once(ABSPATH . 'wp-admin/includes/file.php');
    $upload_overrides = array(
        'test_form' => false,
        'unique_filename_callback' => function($dir, $name, $ext) {
            $prefix = substr(md5(uniqid()), 0, 8);
            return $prefix . '-' . $name . $ext;
        }
    );

    set_time_limit(0);
    wp_raise_memory_limit('admin');

    mdb_write_log("파일 업로드 시도: " . $_FILES['file']['name'] . " (" . $_FILES['file']['size'] . " bytes)");

    $movefile = wp_handle_upload($_FILES['file'], $upload_overrides);

    if ($movefile && !isset($movefile['error'])) {
        mdb_write_log("파일 업로드 성공: " . print_r($movefile, true));
        return array(
            'url' => $movefile['url'],
            'name' => basename($_FILES['file']['name']),
            'size' => $_FILES['file']['size']
        );
    } else {
        mdb_write_log("파일 업로드 실패: " . print_r($movefile['error'], true));
        return new WP_Error('upload_error', $movefile['error']);
    }
}

// 게시글 작성 폼
function malware_board_write_form() {
    if (!is_user_logged_in()) {
        return '<div class="board-message">로그인이 필요합니다.</div>';
    }
    set_time_limit(0);
    ini_set('max_execution_time', 0);
    
    // 폼 제출 처리
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action']) && $_POST['action'] === 'save_malware_board') {
        // 추가 로깅
        mdb_write_log("폼 제출 시작");
        mdb_write_log("파일 정보: " . print_r($_FILES, true));
        
        if (!wp_verify_nonce($_POST['board_nonce'], 'save_malware_board_nonce')) {
            mdb_write_log("Nonce 검증 실패");
            return '<div class="board-message error">잘못된 접근입니다.</div>';
        }

        // 파일 업로드 처리
        $file_data = array('url' => '', 'name' => '');
        if (!empty($_FILES['file']['name'])) {
            mdb_write_log("파일 업로드 시도");
            $upload_result = handle_malware_board_file_upload();
            
            // 추가 로깅
            if (is_wp_error($upload_result)) {
                mdb_write_log("파일 업로드 실패: " . $upload_result->get_error_message());
                return '<div class="board-message error">' . $upload_result->get_error_message() . '</div>';
            }
            
            $file_data = $upload_result;
            mdb_write_log("파일 업로드 성공: " . print_r($file_data, true));
        }
        
        global $wpdb;
        
        // 추가 오류 방지를 위한 prepare() 사용
        $data = array(
            'title' => sanitize_text_field($_POST['title']),
            'content' => wp_kses_post($_POST['content']),
            'author' => get_current_user_id(),
            'file_url' => $file_data['url'],
            'file_name' => $file_data['name'],
            'status' => 'private', 
            'malware_status' => 'pending'
        );
        
        // prepare() 메서드 사용
        $insert_result = $wpdb->insert(
            "{$wpdb->prefix}malware_board", 
            $data,
            ['%s', '%s', '%d', '%s', '%s', '%s', '%s']
        );
        
        // 삽입 결과 로깅
        if ($insert_result === false) {
            mdb_write_log("게시글 저장 실패: " . $wpdb->last_error);
            return '<div class="board-message error">게시글 저장 중 오류가 발생했습니다.</div>';
        }
        
        $post_id = $wpdb->insert_id;
        mdb_write_log("게시글 저장 성공. ID: {$post_id}");
        
        $url = home_url("/?action=view&id={$post_id}");
        
        // 즉시 악성코드 검사 프로세스 시작
        if (get_option('mdb_auto_send', 1)) {
            mdb_write_log("악성코드 검사 시작");
            execute_malware_analysis($post_id, $url);
        } else {
            // 자동 검사가 비활성화된 경우 즉시 공개
            $wpdb->update(
                "{$wpdb->prefix}malware_board",
                array('status' => 'public', 'malware_status' => 'skipped'),
                array('id' => $post_id)
            );
        }
        
        return '<div class="board-message success">게시글이 등록되었습니다. 악성코드 검사 후 공개됩니다.</div>';
    }
    
    ob_start();
    ?>
    <div class="board-form-container">
        <h2>게시글 작성</h2>
        <form method="post" enctype="multipart/form-data" class="board-form">
            <input type="hidden" name="action" value="save_malware_board">
            <?php wp_nonce_field('save_malware_board_nonce', 'board_nonce'); ?>
            
            <div class="form-group">
                <label for="title">제목</label>
                <input type="text" name="title" id="title" required>
            </div>
            
            <div class="form-group">
                <label for="content">내용</label>
                <?php 
                wp_editor('', 'content', array(
                    'media_buttons' => true,
                    'textarea_name' => 'content',
                    'textarea_rows' => 10,
                    'teeny' => true
                ));
                ?>
            </div>
            
            <div class="form-group">
                <label for="file">첨부파일</label>
                <input type="file" name="file" id="file">
                <small>최대 2048MB까지 업로드 가능합니다.</small>
            </div>
            
            <div class="form-buttons">
                <button type="submit" class="submit-btn">게시하기</button>
                <a href="?action=list" class="cancel-btn">취소</a>
            </div>
        </form>
    </div>
    
    <div class="malware-notice">
        <p><small>🔍 악성코드 자동 검사 안내: 게시글 등록 후 자동으로 악성코드 검사를 진행합니다.</small></p>
        <ul>
            <li><strong>양호:</strong> 즉시 공개</li>
            <li><strong>주의:</strong> 공개되지만 주의 표시</li>
            <li><strong>경고:</strong> 비공개 처리</li>
        </ul>
    </div>
    <?php
    return ob_get_clean();
}

function microtime_float() {
    list($usec, $sec) = explode(" ", microtime());
    return ((float)$usec + (float)$sec);
}

function execute_malware_analysis($post_id, $url) {
    // 전체 프로세스 시작 시간 측정
    $start_total_time = microtime_float();
    mdb_write_log("🕒 게시글 ID {$post_id} 악성코드 분석 프로세스 시작");

    // API 설정 확인 시간 측정
    $start_api_prep_time = microtime_float();
    $api_endpoint = get_option('mdb_api_endpoint');
    $api_key = get_option('mdb_api_key');

    if (empty($api_endpoint)) {
        mdb_write_log("❌ 게시글 ID {$post_id} - API 엔드포인트가 설정되지 않음");
        $api_prep_time = microtime_float() - $start_api_prep_time;
        mdb_write_log("🕒 API 준비 소요 시간: {$api_prep_time}초");

        global $wpdb;
        $wpdb->update(
            "{$wpdb->prefix}malware_board",
            [
                'status' => 'private',
                'malware_status' => 'skipped',
                'malware_score' => 0,
                'malicious_file_count' => 0,
                'total_file_count' => 0
            ],
            ['id' => $post_id]
        );
        return;
    }

    // 게시글 조회 시간 측정
    $start_post_fetch_time = microtime_float();
    global $wpdb;
    $post = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}malware_board WHERE id = %d", $post_id
    ));

    if (!$post) {
        mdb_write_log("❌ 게시글 ID {$post_id}를 찾을 수 없음");
        $post_fetch_time = microtime_float() - $start_post_fetch_time;
        mdb_write_log("🕒 게시글 조회 소요 시간: {$post_fetch_time}초");
        return;
    }

    $post_fetch_time = microtime_float() - $start_post_fetch_time;
    mdb_write_log("🕒 게시글 조회 소요 시간: {$post_fetch_time}초");

    // 파일 크기 로깅
    $file_size = $post->file_url ? 
        filesize(str_replace(wp_upload_dir()['baseurl'], wp_upload_dir()['basedir'], $post->file_url)) : 
        0;

    mdb_write_log("📊 파일 크기: {$file_size} bytes");
    mdb_write_log("📊 파일 URL: {$post->file_url}");

    // API 요청 준비 시간 측정
    $start_api_request_prep_time = microtime_float();
    $headers = array('Content-Type' => 'application/json');
    if (!empty($api_key)) {
        $headers['Authorization'] = 'Bearer ' . $api_key;
    }

    $post_text = $post->title . "\n\n" . strip_tags($post->content);
    $download_link = !empty($post->file_url) ? $post->file_url : '';

    $post_data = array(
        'post_id' => $post_id,
        'post_text' => $post_text,
        'download_link' => $download_link,
        'file_size' => $file_size  // 파일 크기 추가
    );

    $args = array(
        'method' => 'POST',
        'headers' => $headers,
        'body' => json_encode($post_data),
        'timeout' => 300,  // 5분으로 늘림
        'blocking' => true
    );
    $api_request_prep_time = microtime_float() - $start_api_request_prep_time;
    mdb_write_log("🕒 API 요청 준비 소요 시간: {$api_request_prep_time}초");

    // API 요청 전송 시간 측정
    $start_api_send_time = microtime_float();
    mdb_write_log("📤 API 요청 전송 중 - 게시글 ID: {$post_id}");
    mdb_write_log("🌐 API 엔드포인트: {$api_endpoint}");
    
    // API 요청 세부 정보 로깅
    mdb_write_log("🕒 API 요청 전송 세부 정보", [
        'file_size' => $file_size,
        'file_url' => $post->file_url,
        'post_id' => $post_id,
        'api_endpoint' => $api_endpoint
    ]);

    $response = wp_remote_post($api_endpoint, $args);
    $api_send_time = microtime_float() - $start_api_send_time;
    mdb_write_log("🕒 API 요청 전송 소요 시간: {$api_send_time}초");

    // API 응답 처리 시간 측정
    $start_api_response_time = microtime_float();
    if (is_wp_error($response)) {
        mdb_write_log("❌ API 요청 오류: " . $response->get_error_message());
        $wpdb->update("{$wpdb->prefix}malware_board", ['malware_status' => 'failed'], ['id' => $post_id]);
        $api_response_time = microtime_float() - $start_api_response_time;
        mdb_write_log("🕒 API 응답 처리 소요 시간: {$api_response_time}초");
        return;
    }

    $code = wp_remote_retrieve_response_code($response);
    $body = wp_remote_retrieve_body($response);
    mdb_write_log("📥 API 응답 코드: {$code}");
    mdb_write_log("📄 응답 내용: {$body}");

    if ($code === 200) {
        $result = json_decode($body, true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            mdb_write_log("❌ JSON 파싱 오류");
            $wpdb->update("{$wpdb->prefix}malware_board", ['malware_status' => 'failed'], ['id' => $post_id]);
            $api_response_time = microtime_float() - $start_api_response_time;
            mdb_write_log("🕒 API 응답 처리 소요 시간: {$api_response_time}초");
            return;
        }

        process_malware_analysis_result(
            $post_id,
            intval($result['malicious_count'] ?? 0),
            $result['risk_level_readable'] ?? '',
            $result
        );
    } else {
        $wpdb->update("{$wpdb->prefix}malware_board", ['malware_status' => 'failed'], ['id' => $post_id]);
        mdb_write_log("❌ API 오류 응답 처리됨");
    }

    $api_response_time = microtime_float() - $start_api_response_time;
    mdb_write_log("🕒 API 응답 처리 소요 시간: {$api_response_time}초");

    // 전체 프로세스 소요 시간 계산
    $total_time = microtime_float() - $start_total_time;
    mdb_write_log("🕒 게시글 ID {$post_id} 전체 악성코드 분석 프로세스 소요 시간: {$total_time}초");
}

// 분석 상태 업데이트 함수 추가
function update_malware_analysis_status($post_id, $status, $message) {
    global $wpdb;
    
    $wpdb->update(
        "{$wpdb->prefix}malware_board",
        [
            'malware_status' => $status,
            'malware_details' => $message
        ],
        ['id' => $post_id]
    );
    
    mdb_write_log("게시글 ID {$post_id} 분석 상태 업데이트: {$status} - {$message}");
}
// API 결과 확인 함수 (cron hook에서 호출)
function check_malware_api_result($post_id) {
    mdb_write_log("게시글 ID {$post_id} - API 결과 확인 시작");
    
    // API Handler를 통해 결과 조회
    $result = MDBApiHandler::get_malware_analysis_result($post_id);
    
    if ($result && isset($result['malware_score'])) {
        $malware_score = intval($result['malware_score']);
        $details = isset($result['details']) ? $result['details'] : '';
        
        // 기본값 추가
        $items = [
            'malicious_count' => $result['malicious_count'] ?? 0,
            'total_files' => $result['total_files'] ?? 0,
            'risk_level' => $result['risk_level'] ?? '미분석',
            'risk_level_readable' => $result['risk_level_readable'] ?? '미분석',
            'vt_report_url' => $result['vt_report_url'] ?? ''
        ];

        process_malware_analysis_result(
            $post_id, 
            $malware_score, 
            $details, 
            $items
        );
    } else {
        // 실제 운영에서는 API에서 결과를 받아야 하지만, 
        // 테스트용으로 임시 랜덤 점수 생성
        $malware_score = rand(0, 10);
        $details = "테스트 분석 결과 - 점수: {$malware_score}";
        
        $items = [
            'malicious_count' => 0,
            'total_files' => 1,
            'risk_level' => '미분석',
            'risk_level_readable' => '미분석',
            'vt_report_url' => ''
        ];

        process_malware_analysis_result(
            $post_id, 
            $malware_score, 
            $details, 
            $items
        );
    }
}
add_action('mdb_check_api_result', 'check_malware_api_result');

// 악성코드 분석 결과 처리 함수
function process_malware_analysis_result($post_id, $malware_score, $details = '', $items = []) {
    global $wpdb;
    $table_name = $wpdb->prefix . 'malware_board';
    
    // 추가 로깅
    mdb_write_log("📊 악성코드 분석 결과 상세 정보", [
        'post_id' => $post_id,
        'malware_score' => $malware_score,
        'details' => $details,
        'items' => $items
    ]);

    // risk_level을 기준으로 상태 결정
    $risk_level = $items['risk_level'] ?? '미분석';
    
    $malicious_count = $items['malicious_count'] ?? 0;
    $total_files = $items['total_files'] ?? 0;
    
    switch ($risk_level) {
        case '양호':
        case '주의':
        case '미분석':
            $status = 'public';
            $malware_status = $risk_level === '양호' ? 'safe' : 
                              ($risk_level === '주의' ? 'warning' : 'pending');
            $block_reason = $risk_level === '주의' ? '주의 등급 파일 포함' : '';
            break;
        case '위험':
            $status = 'private';
            $malware_status = 'danger';
            $block_reason = '악성코드 검사에서 위험 등급으로 분류됨';
            break;
        default:
            $status = 'public';
            $malware_status = '미분석';
            $block_reason = '알 수 없는 위험 수준';
    }
    
    $update_result = $wpdb->update($table_name, 
        [
            'status' => $status,
            'malware_status' => $malware_status,
            'malware_score' => $malware_score,
            'malware_details' => $details,
            'block_reason' => $block_reason,
            'detected_items' => json_encode($items),
            'malicious_file_count' => $malicious_count,
            'total_file_count' => $total_files
        ], 
        ['id' => $post_id]
    );

    // 업데이트 결과 로깅
    if ($update_result === false) {
        mdb_write_log("❌ 게시글 상태 업데이트 실패: " . $wpdb->last_error);
    } else {
        mdb_write_log("✅ 게시글 상태 업데이트 성공");
    }
    
    // VirusTotal 리포트 URL 로깅 (옵션)
    if (isset($items['vt_report_url'])) {
        mdb_write_log("🌐 VirusTotal 리포트 URL: " . $items['vt_report_url']);
    }
    
    mdb_write_log("📊 게시글 ID {$post_id} 처리 결과", [
        '상태' => $status,
        '악성코드 상태' => $malware_status,
        '악성 파일 수' => $malicious_count,
        '전체 파일 수' => $total_files
    ]);
}

// 악성코드 감지 알림 이메일
function send_malware_detection_email($post_id, $malware_score, $details) {
    if (!get_option('mdb_admin_notifications', 1)) {
        return;
    }
    
    $admin_email = get_option('admin_email');
    $site_name = get_bloginfo('name');
    $site_url = home_url();
    
    $subject = "[{$site_name}] 악성코드 경고 - 게시글 비공개 처리";
    
    $message = "악성코드 검사에서 위험한 파일이 감지되어 게시글이 비공개로 처리되었습니다.\n\n";
    $message .= "사이트: {$site_name} ({$site_url})\n";
    $message .= "게시글 ID: {$post_id}\n";
    $message .= "악성코드 점수: {$malware_score}/10\n";
    $message .= "세부사항: {$details}\n\n";
    $message .= "게시글 확인: " . home_url("/?action=view&id={$post_id}") . "\n";
    $message .= "관리자 페이지: " . admin_url('tools.php?page=mdb-posts-management') . "\n\n";
    $message .= "이 메일은 자동으로 발송된 메일입니다.";
    
    $headers = array('Content-Type: text/plain; charset=UTF-8');
    wp_mail($admin_email, $subject, $message, $headers);
    
    mdb_write_log("관리자 알림 이메일 발송: {$admin_email}");
}

// 게시글 목록 표시
function display_malware_board_list() {
    global $wpdb;
    
    $page = isset($_GET['bpage']) ? max(1, intval($_GET['bpage'])) : 1;
    $per_page = 15;
    $offset = ($page - 1) * $per_page;
    
    $search = isset($_GET['search']) ? sanitize_text_field($_GET['search']) : '';
    
    // 권한에 따른 WHERE 절 구성
    $where = array();
    $where_params = array();
    
    $current_user_id = get_current_user_id();
    
    if (current_user_can('edit_posts')) {
        // 관리자는 모든 게시글 볼 수 있음
        $where[] = "1=1";
    } else {
        // 일반 사용자는 공개 게시글과 자신의 게시글만
        $where[] = "(status = 'public' OR (status IN ('private', 'pending') AND b.author = %d))";
        $where_params[] = $current_user_id;
    }
    
    if ($search) {
        $where[] = "(title LIKE %s OR content LIKE %s)";
        $where_params[] = "%{$search}%";
        $where_params[] = "%{$search}%";
    }
    
    $where_clause = !empty($where) ? "WHERE " . implode(" AND ", $where) : "";
    
    // 전체 게시글 수 조회
    $total = $wpdb->get_var($wpdb->prepare(
        "SELECT COUNT(*) FROM {$wpdb->prefix}malware_board b " . $where_clause,
        $where_params
    ));
    
    // 게시글 목록 조회
    $posts = $wpdb->get_results($wpdb->prepare(
        "SELECT b.*, u.display_name as author_name 
        FROM {$wpdb->prefix}malware_board b 
        LEFT JOIN {$wpdb->users} u ON b.author = u.ID " .
        $where_clause . " ORDER BY b.created_at DESC LIMIT %d OFFSET %d",
        array_merge($where_params, array($per_page, $offset))
    ));

    ob_start();
    ?>
    <div class="board-list">
        <div class="board-search">
            <form method="get">
                <input type="hidden" name="action" value="list">
                <input type="text" name="search" value="<?php echo esc_attr($search); ?>" placeholder="검색어를 입력하세요">
                <button type="submit">검색</button>
            </form>
        </div>

        <table>
            <thead>
                <tr>
                    <th width="8%">번호</th>
                    <th>제목</th>
                    <th width="15%">작성자</th>
                    <th width="10%">상태</th>
                    <th width="15%">작성일</th>
                </tr>
            </thead>
            <tbody>
                <?php if ($posts): ?>
                    <?php foreach ($posts as $post): ?>
                    <tr>
                        <td class="center"><?php echo $post->id; ?></td>
                        <td>
                            <a href="?action=view&id=<?php echo $post->id; ?>">
                                <?php echo esc_html($post->title); ?>
                                <?php echo $post->file_url ? ' <i class="file-icon">📎</i>' : ''; ?>
                            </a>
                            <?php
                            // 악성코드 상태 표시
                            if ($post->status === 'pending'):
                            ?>
                            <small class="malware-pending">(검사중)</small>
                            <?php elseif ($post->malware_status === 'warning'): ?>
                            <small class="malware-warning">(주의)</small>
                            <?php elseif ($post->malware_status === 'danger'): ?>
                            <small class="malware-danger">(위험)</small>
                            <?php endif; ?>
                        </td>
                        <td class="center"><?php echo esc_html($post->author_name); ?></td>
                        <td class="center">
                            <?php
                            switch($post->status) {
                                case 'public':
                                    echo '<span class="status-public">공개</span>';
                                    break;
                                case 'private':
                                    echo '<span class="status-private">비공개</span>';
                                    // 악성코드로 인한 비공개인지 표시 (관리자만)
                                    if (current_user_can('edit_posts') && $post->malware_status === 'danger'):
                                    ?>
                                    <br><small class="malware-blocked">(악성코드 감지)</small>
                                    <?php
                                    endif;
                                    break;
                                case 'pending':
                                    echo '<span class="status-pending">검사중</span>';
                                    break;
                            }
                            ?>
                        </td>
                        <td class="center"><?php echo date('Y-m-d', strtotime($post->created_at)); ?></td>
                    </tr>
                    <?php endforeach; ?>
                <?php else: ?>
                    <tr>
                        <td colspan="5" class="center">게시글이 없습니다.</td>
                    </tr>
                <?php endif; ?>
            </tbody>
        </table>
        
        <?php
        $total_pages = ceil($total / $per_page);
        if ($total_pages > 1):
        ?>
        <div class="pagination">
            <?php
            $start_page = max(1, $page - 4);
            $end_page = min($total_pages, $page + 4);
            
            if ($page > 1) {
                echo '<a href="?action=list&bpage=1' . ($search ? '&search=' . urlencode($search) : '') . '" class="page-nav">◀◀</a>';
                echo '<a href="?action=list&bpage=' . ($page - 1) . ($search ? '&search=' . urlencode($search) : '') . '" class="page-nav">◀</a>';
            }
            
            for ($i = $start_page; $i <= $end_page; $i++) {
                echo '<a href="?action=list&bpage=' . $i . ($search ? '&search=' . urlencode($search) : '') . '"' . 
                     ($page == $i ? ' class="current"' : '') . '>' . $i . '</a>';
            }
            
            if ($page < $total_pages) {
                echo '<a href="?action=list&bpage=' . ($page + 1) . ($search ? '&search=' . urlencode($search) : '') . '" class="page-nav">▶</a>';
                echo '<a href="?action=list&bpage=' . $total_pages . ($search ? '&search=' . urlencode($search) : '') . '" class="page-nav">▶▶</a>';
            }
            ?>
        </div>
        <?php endif; ?>
        
        <?php if (is_user_logged_in()): ?>
        <div class="board-buttons">
            <a href="?action=write" class="write-btn">글쓰기</a>
        </div>
        <?php endif; ?>
    </div>
    <?php
    return ob_get_clean();
}

// 게시글 상세 보기
function display_malware_board_view() {
    if (!isset($_GET['id'])) {
        return '<div class="board-message">잘못된 접근입니다.</div>';
    }
    
    global $wpdb;
    $post = $wpdb->get_row($wpdb->prepare(
        "SELECT b.*, u.display_name as author_name 
        FROM {$wpdb->prefix}malware_board b 
        LEFT JOIN {$wpdb->users} u ON b.author = u.ID 
        WHERE b.id = %d",
        intval($_GET['id'])
    ));
    
    if (!$post) {
        return '<div class="board-message">게시글을 찾을 수 없습니다.</div>';
    }

    // 접근 권한 체크
    $current_user_id = get_current_user_id();
    
    if ($post->status === 'private') {
        if (!current_user_can('edit_posts') && $current_user_id != $post->author) {
            return '<div class="board-message">이 게시글은 비공개입니다.</div>';
        }
    }
    
    if ($post->status === 'pending') {
        if (!current_user_can('edit_posts') && $current_user_id != $post->author) {
            return '<div class="board-message">이 게시글은 현재 악성코드 검사 중입니다.</div>';
        }
    }
    
    ob_start();
    ?>
    <div class="board-view">
        <h2><?php echo esc_html($post->title); ?></h2>
        <div class="meta">
            <span>작성자: <?php echo esc_html($post->author_name); ?></span>
            <span>작성일: <?php echo date('Y-m-d H:i', strtotime($post->created_at)); ?></span>
            <?php if ($post->updated_at != $post->created_at): ?>
            <span>수정일: <?php echo date('Y-m-d H:i', strtotime($post->updated_at)); ?></span>
            <?php endif; ?>
            <span>상태: 
                <?php
                switch($post->status) {
                    case 'public': echo '<span class="status-public">공개</span>'; break;
                    case 'private': echo '<span class="status-private">비공개</span>'; break;
                    case 'pending': echo '<span class="status-pending">검사중</span>'; break;
                }
                ?>
            </span>
            <?php if ($post->malware_score > 0): ?>
            <span>악성코드 점수: <?php echo $post->malware_score; ?>/10</span>
            <?php endif; ?>
        </div>
        
        <?php if ($post->status === 'public' && $post->malware_status === 'warning'): ?>
        <div class="malware-warning-info">
            <h4>⚠️ 주의</h4>
            <p>이 게시글은 악성코드 검사에서 주의 등급으로 분류되었습니다. (점수: <?php echo $post->malware_score; ?>/10)</p>
            <p>첨부파일 다운로드 시 주의하시기 바랍니다.</p>
            <?php if (!empty($post->malware_details)): ?>
            <p><strong>세부사항:</strong> <?php echo esc_html($post->malware_details); ?></p>
            <?php endif; ?>
        </div>
        <?php endif; ?>
        
        <?php if ($post->status === 'private' && $post->malware_status === 'danger' && (current_user_can('edit_posts') || $current_user_id == $post->author)): ?>
        <div class="malware-danger-info">
            <h4>🚫 경고 - 악성코드 감지</h4>
            <p>이 게시글은 악성코드 검사에서 위험 등급으로 분류되어 비공개 처리되었습니다. (점수: <?php echo $post->malware_score; ?>/10)</p>
            <?php if (!empty($post->malware_details)): ?>
            <p><strong>세부사항:</strong> <?php echo esc_html($post->malware_details); ?></p>
            <?php endif; ?>
            <p><strong>차단 사유:</strong> <?php echo esc_html($post->block_reason); ?></p>
            <p><small>파일을 제거하거나 수정한 후 다시 게시글을 수정해주세요.</small></p>
        </div>
        <?php endif; ?>
        
        <?php if ($post->status === 'pending'): ?>
        <div class="malware-pending-info">
            <h4>🔍 악성코드 검사 진행 중</h4>
            <p>현재 이 게시글의 악성코드 검사가 진행 중입니다. 잠시만 기다려주세요.</p>
            <p>검사 완료 후 자동으로 공개 여부가 결정됩니다.</p>
        </div>
        <?php endif; ?>
        
        <div class="content">
            <?php echo wpautop($post->content); ?>
        </div>
        
        <?php if ($post->file_url): ?>
        <div class="attachment">
            <strong>첨부파일:</strong>
            <a href="<?php echo esc_url($post->file_url); ?>" target="_blank">
                <?php echo esc_html($post->file_name ? $post->file_name : basename($post->file_url)); ?>
            </a>
            <?php if ($post->malware_status === 'warning'): ?>
            <p class="file-warning">⚠️ 주의: 이 파일은 악성코드 검사에서 주의 등급으로 분류되었습니다.</p>
            <?php elseif ($post->malware_status === 'danger'): ?>
            <p class="file-danger">🚫 경고: 이 파일은 악성코드 검사에서 위험 등급으로 분류되었습니다.</p>
            <?php endif; ?>
        </div>
        <?php endif; ?>
        
        <div class="board-buttons">
            <a href="?action=list" class="list-btn">목록</a>
            <?php if (current_user_can('edit_posts') || get_current_user_id() == $post->author): ?>
                <a href="?action=edit&id=<?php echo $post->id; ?>" class="edit-btn">수정</a>
                <form method="post" class="delete-form" onsubmit="return confirm('정말 삭제하시겠습니까?');">
                    <input type="hidden" name="action" value="delete_malware_board">
                    <input type="hidden" name="post_id" value="<?php echo $post->id; ?>">
                    <?php wp_nonce_field('delete_malware_board_nonce', 'delete_nonce'); ?>
                    <button type="submit" class="delete-btn">삭제</button>
                </form>
            <?php endif; ?>
        </div>
    </div>
    <?php
    return ob_get_clean();
}

// 게시글 수정 폼
function malware_board_edit_form() {
    if (!isset($_GET['id'])) {
        return '<div class="board-message">잘못된 접근입니다.</div>';
    }
    
    global $wpdb;
    $post = $wpdb->get_row($wpdb->prepare(
        "SELECT * FROM {$wpdb->prefix}malware_board WHERE id = %d",
        intval($_GET['id'])
    ));
    
    if (!$post) {
        return '<div class="board-message">게시글을 찾을 수 없습니다.</div>';
    }
    
    if (!current_user_can('edit_posts') && get_current_user_id() != $post->author) {
        return '<div class="board-message">수정 권한이 없습니다.</div>';
    }
    
    // 폼 제출 처리
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action']) && $_POST['action'] === 'update_malware_board') {
        if (!wp_verify_nonce($_POST['board_nonce'], 'update_malware_board_nonce')) {
            return '<div class="board-message error">잘못된 접근입니다.</div>';
        }
        
        $data = array(
            'title' => sanitize_text_field($_POST['title']),
            'content' => wp_kses_post($_POST['content']),
            'status' => 'pending', // 수정 시 다시 검사 대기로
            'malware_status' => 'pending',
            'malware_score' => 0,
            'malware_details' => '',
            'block_reason' => ''
        );

        // 관리자 권한으로 수동 상태 설정
        if (current_user_can('edit_posts') && isset($_POST['manual_status'])) {
            $manual_status = sanitize_text_field($_POST['manual_status']);
            if ($manual_status === 'force_private') {
                $data['status'] = 'private';
                $data['malware_status'] = 'manual';
                $data['block_reason'] = '관리자에 의해 수동 비공개 처리';
            } elseif ($manual_status === 'force_public') {
                $data['status'] = 'public';
                $data['malware_status'] = 'manual';
            }
        }
        
        if (!empty($_FILES['file']['name'])) {
            $file_result = handle_malware_board_file_upload();
            if (is_wp_error($file_result)) {
                return '<div class="board-message error">' . $file_result->get_error_message() . '</div>';
            }

            // 기존 파일 삭제
            if ($post->file_url) {
                $old_file_path = str_replace(wp_upload_dir()['baseurl'], wp_upload_dir()['basedir'], $post->file_url);
                if (file_exists($old_file_path)) {
                    unlink($old_file_path);
                }
            }

            $data['file_url'] = $file_result['url'];
            $data['file_name'] = $file_result['name'];
        }
        
        $wpdb->update("{$wpdb->prefix}malware_board", $data, array('id' => $post->id));
        
        // 자동 검사가 활성화되고 수동 설정이 아닌 경우 다시 검사
        if (get_option('mdb_auto_send', 1) && $data['malware_status'] === 'pending') {
            $url = home_url("/?action=view&id={$post->id}");
            execute_malware_analysis($post->id, $url);
        }
        
        // 수정 후 상세보기로 리다이렉트
        wp_redirect(add_query_arg(array('action' => 'view', 'id' => $post->id, 'updated' => '1')));
        exit;
    }
    
    ob_start();
    ?>
    <div class="board-form-container">
        <h2>게시글 수정</h2>
        <form method="post" enctype="multipart/form-data" class="board-form">
            <input type="hidden" name="action" value="update_malware_board">
            <?php wp_nonce_field('update_malware_board_nonce', 'board_nonce'); ?>
            
            <div class="form-group">
                <label for="title">제목</label>
                <input type="text" name="title" id="title" value="<?php echo esc_attr($post->title); ?>" required>
            </div>
            
            <div class="form-group">
                <label for="content">내용</label>
                <?php 
                wp_editor($post->content, 'content', array(
                    'media_buttons' => true,
                    'textarea_name' => 'content',
                    'textarea_rows' => 10,
                    'teeny' => true
                ));
                ?>
            </div>

            <?php if (current_user_can('edit_posts')): ?>
            <div class="form-group">
                <label for="manual_status">관리자 수동 설정</label>
                <select name="manual_status" id="manual_status">
                    <option value="">자동 검사 실행</option>
                    <option value="force_public">강제 공개 (검사 안함)</option>
                    <option value="force_private">강제 비공개</option>
                </select>
                <small>관리자는 악성코드 검사 없이 직접 공개/비공개를 설정할 수 있습니다.</small>
            </div>
            <?php endif; ?>
            
            <div class="form-group">
                <label for="file">첨부파일</label>
                <?php if ($post->file_url): ?>
                <p>현재 파일: <a href="<?php echo esc_url($post->file_url); ?>" target="_blank">
                    <?php echo esc_html($post->file_name ? $post->file_name : basename($post->file_url)); ?>
                </a></p>
                <?php endif; ?>
                <input type="file" name="file" id="file">
                <small>새 파일을 업로드하면 기존 파일은 삭제됩니다. (최대 2048MB)</small>
            </div>
            
            <div class="form-buttons">
                <button type="submit" class="submit-btn">수정하기</button>
                <a href="?action=view&id=<?php echo $post->id; ?>" class="cancel-btn">취소</a>
            </div>
        </form>
    </div>
    <?php
    return ob_get_clean();
}

// 게시글 삭제 처리
function handle_malware_board_delete() {
    if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['action']) && $_POST['action'] === 'delete_malware_board') {
        if (!wp_verify_nonce($_POST['delete_nonce'], 'delete_malware_board_nonce')) {
            wp_die('잘못된 접근입니다.');
        }
        
        $post_id = intval($_POST['post_id']);
        global $wpdb;
        
        $post = $wpdb->get_row($wpdb->prepare(
            "SELECT * FROM {$wpdb->prefix}malware_board WHERE id = %d",
            $post_id
        ));
        
        if (!$post) {
            wp_die('게시글을 찾을 수 없습니다.');
        }
        
        if (!current_user_can('edit_posts') && get_current_user_id() != $post->author) {
            wp_die('삭제 권한이 없습니다.');
        }
        
        // 첨부 파일 삭제
        if ($post->file_url) {
            $file_path = str_replace(wp_upload_dir()['baseurl'], wp_upload_dir()['basedir'], $post->file_url);
            if (file_exists($file_path)) {
                unlink($file_path);
            }
        }
        
        $wpdb->delete("{$wpdb->prefix}malware_board", array('id' => $post_id));
        
        wp_redirect(add_query_arg(array('action' => 'list', 'deleted' => '1')));
        exit;
    }
}
add_action('init', 'handle_malware_board_delete');

// CSS 스타일 추가
function add_malware_board_styles() {
    ?>
    <style>
        .malware-board-wrap {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        .board-message {
            padding: 20px;
            margin: 20px 0;
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            text-align: center;
        }
        .board-message.error {
            background: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
        }
        .board-message.success {
            background: #d4edda;
            border-color: #c3e6cb;
            color: #155724;
        }
        .status-public { color: #28a745; font-weight: bold; }
        .status-private { color: #6c757d; font-weight: bold; }
        .status-pending { color: #17a2b8; font-weight: bold; }
        .malware-pending { color: #17a2b8; font-style: italic; }
        .malware-warning { color: #ffc107; font-style: italic; }
        .malware-danger { color: #dc3545; font-style: italic; }
        .malware-blocked { color: #dc3545; font-style: italic; }
        
        .malware-notice {
            margin-top: 15px;
            padding: 15px;
            background: #e9ecef;
            border-radius: 4px;
            border-left: 4px solid #6c757d;
        }
        .malware-notice ul {
            margin: 10px 0;
            padding-left: 20px;
        }
        
        .malware-warning-info {
            margin: 20px 0;
            padding: 15px;
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 4px;
            color: #856404;
        }
        .malware-warning-info h4 {
            margin-top: 0;
            color: #856404;
        }
        
        .malware-danger-info {
            margin: 20px 0;
            padding: 15px;
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 4px;
            color: #721c24;
        }
        .malware-danger-info h4 {
            margin-top: 0;
            color: #721c24;
        }
        
        .malware-pending-info {
            margin: 20px 0;
            padding: 15px;
            background: #d1ecf1;
            border: 1px solid #bee5eb;
            border-radius: 4px;
            color: #0c5460;
        }
        .malware-pending-info h4 {
            margin-top: 0;
            color: #0c5460;
        }
        
        .file-warning {
            color: #856404;
            font-weight: bold;
            margin-top: 5px;
        }
        .file-danger {
            color: #721c24;
            font-weight: bold;
            margin-top: 5px;
        }
        
        .board-form-container, .board-view, .board-list {
            background: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin: 20px 0;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
        }
        .form-group input[type="text"], .form-group select {
            width: 100%;
            padding: 8px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
        }
        .form-group small {
            display: block;
            margin-top: 5px;
            color: #6c757d;
        }
        
        .board-search {
            margin-bottom: 20px;
            text-align: right;
        }
        .board-search input[type="text"] {
            padding: 6px;
            width: 200px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
        }
        .board-search button {
            padding: 6px 12px;
            background: #6c757d;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .board-list table {
            width: 100%;
            border-collapse: collapse;
            border-top: 2px solid #343a40;
        }
        .board-list th, .board-list td {
            padding: 12px;
            border-bottom: 1px solid #dee2e6;
        }
        .board-list th {
            background: #f8f9fa;
            font-weight: bold;
        }
        .board-list td.center {
            text-align: center;
        }
        
        .file-icon {
            color: #6c757d;
            font-style: normal;
        }
        
        .pagination {
            margin: 20px 0;
            text-align: center;
        }
        .pagination a {
            display: inline-block;
            padding: 6px 12px;
            margin: 0 2px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            text-decoration: none;
            color: #495057;
        }
        .pagination a.current {
            background: #007bff;
            color: white;
            border-color: #007bff;
        }
        .pagination a.page-nav {
            background: #e9ecef;
        }
        
        .board-buttons {
            margin-top: 20px;
            text-align: right;
        }
        .write-btn, .list-btn, .edit-btn, .delete-btn, .submit-btn, .cancel-btn {
            display: inline-block;
            padding: 8px 16px;
            margin-left: 10px;
            border-radius: 4px;
            text-decoration: none;
            font-weight: bold;
            cursor: pointer;
            border: none;
        }
        .write-btn, .submit-btn { background: #007bff; color: white; }
        .list-btn, .cancel-btn { background: #6c757d; color: white; }
        .edit-btn { background: #28a745; color: white; }
        .delete-btn { background: #dc3545; color: white; }
        
        .board-view .meta {
            margin-bottom: 20px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 4px;
        }
        .board-view .meta span {
            display: inline-block;
            margin-right: 20px;
            color: #6c757d;
        }
        .board-view .content {
            min-height: 200px;
            margin-bottom: 20px;
            line-height: 1.6;
        }
        .board-view .attachment {
            margin: 20px 0;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 4px;
        }
        .delete-form {
            display: inline-block;
        }
    </style>
    <?php
}
add_action('wp_head', 'add_malware_board_styles');

// 단축코드 등록
function malware_board_shortcode($atts) {
    ob_start();
    
    $action = isset($_GET['action']) ? $_GET['action'] : 'list';
    
    echo '<div class="malware-board-wrap">';
    
    // 메시지 표시
    if (isset($_GET['success'])) {
        echo '<div class="board-message success">작업이 완료되었습니다.</div>';
    }
    if (isset($_GET['updated'])) {
        echo '<div class="board-message success">게시글이 수정되었습니다.</div>';
    }
    if (isset($_GET['deleted'])) {
        echo '<div class="board-message success">게시글이 삭제되었습니다.</div>';
    }
    
    switch ($action) {
        case 'write':
            echo malware_board_write_form();
            break;
        case 'view':
            echo display_malware_board_view();
            break;
        case 'edit':
            echo malware_board_edit_form();
            break;
        default:
            echo display_malware_board_list();
    }
    
    echo '</div>';
    
    return ob_get_clean();
}
add_shortcode('malware_board', 'malware_board_shortcode');